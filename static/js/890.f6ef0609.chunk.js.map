{"version":3,"file":"static/js/890.f6ef0609.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/common components/defaultLoginFormInput/InputField.module.css?3541","components/common components/defaultLoginFormInput/InputField.jsx","webpack://my-app/./src/components/loginPage/loginForm/LoginForm.module.css?96d1","components/loginPage/loginForm/LoginForm.jsx","components/loginPage/LoginPage.jsx","schemas/yupSchema.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"InputField\":\"InputField_InputField__rVvlM\",\"inputError\":\"InputField_inputError__Nhjd8\",\"errorMessage\":\"InputField_errorMessage__0Hy+h\"};","import React from \"react\";\r\nimport s from './InputField.module.css';\r\n\r\nconst InputField = ({ id, name, type, placeholder, handleChange, handleBlur, errors, touched, values, text = '' }) => {\r\n    return (\r\n        <div className={s.InputField}>\r\n            <label htmlFor={type}>{text} </label>\r\n            <input\r\n                id={id}\r\n                name={name}\r\n                type={type}\r\n                onChange={handleChange}\r\n                value={values[name]}\r\n                placeholder={placeholder}\r\n                onBlur={handleBlur}\r\n                className={errors[name] && touched[name] ? s.inputError : ''} />\r\n            {errors[name] && touched[name] && <p className={s.errorMessage}>{errors[name]}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InputField;","// extracted by mini-css-extract-plugin\nexport default {\"errorMessage\":\"LoginForm_errorMessage__Zf40b\"};","import React from \"react\";\r\nimport { useFormik } from 'formik';\r\nimport { basicLoginSchema } from \"../../../schemas/yupSchema\";\r\nimport s from './LoginForm.module.css';\r\nimport InputField from \"../../common components/defaultLoginFormInput/InputField\";\r\n\r\nexport const LoginForm = ({ login, captchaURL }) => {\r\n\r\n    const onSubmit = (values, { setSubmitting, setStatus }) => {\r\n        setSubmitting(true);\r\n        login(values.email, values.password, values.rememberMe, values.captcha, setStatus, setSubmitting);\r\n        /*   resetForm(); */\r\n    };\r\n\r\n    const { values, status, errors, touched, isSubmitting, handleChange, handleBlur, handleSubmit } = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: true,\r\n            captcha: '',\r\n        },\r\n        validationSchema: basicLoginSchema,\r\n        onSubmit,\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit} autoComplete=\"off\">\r\n                <InputField\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    placeholder={\"Enter your email\"}\r\n                    handleChange={handleChange}\r\n                    handleBlur={handleBlur}\r\n                    errors={errors}\r\n                    touched={touched}\r\n                    values={values}\r\n                    text=\"Email\"\r\n                />\r\n                <InputField\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    placeholder={\"Enter your password\"}\r\n                    handleChange={handleChange}\r\n                    handleBlur={handleBlur}\r\n                    errors={errors}\r\n                    touched={touched}\r\n                    values={values}\r\n                    text=\"Password\"\r\n                />\r\n                {\r\n                    status &&\r\n                    <div className={s.errorMessage}>\r\n                        {status}\r\n                    </div>\r\n                }\r\n                <div className={s.checkBoxField}>\r\n                    <input\r\n                        id=\"rememberMe\"\r\n                        name=\"rememberMe\"\r\n                        type=\"checkbox\"\r\n                        onChange={handleChange}\r\n                        checked={values.rememberMe}\r\n                        onBlur={handleBlur}\r\n                        className={errors.rememberMe && touched.rememberMe ? s.inputError : ''} /> Remember Me?\r\n                </div>\r\n                {\r\n                    captchaURL &&\r\n                    <div>\r\n                        <img alt='captcha' src={captchaURL} />\r\n                        <InputField\r\n                            id=\"captcha\"\r\n                            name=\"captcha\"\r\n                            type=\"text\"\r\n                            placeholder={\"Input picture values\"}\r\n                            handleChange={handleChange}\r\n                            handleBlur={handleBlur}\r\n                            errors={errors}\r\n                            touched={touched}\r\n                            values={values}\r\n                        />\r\n                    </div>\r\n                }\r\n                <button disabled={isSubmitting} type=\"submit\">Sign Up</button>\r\n            </form>\r\n            <div>\r\n                <p>Access Login: <strong>free@samuraijs.com</strong></p>\r\n                <p>Access Password: <strong>free</strong></p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { login } from \"../../redux/authReducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { LoginForm } from \"./loginForm/LoginForm\";\r\n\r\nconst LoginPage = ({ isAuth, login, captchaURL }) => {\r\n    if (isAuth) {\r\n        return <Navigate to='/profile' />;\r\n    }\r\n\r\n    return <div>\r\n        <LoginForm captchaURL={captchaURL} login={login} />\r\n    </div>;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.authReducer.isAuth,\r\n        captchaURL: state.authReducer.captchaURL,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { login })(LoginPage);","import * as yup from 'yup';\r\n\r\nexport const basicLoginSchema = yup.object().shape({\r\n    email: yup\r\n        .string()\r\n        .email('Please enter the valid email.')\r\n        .required('Email required.'),\r\n    password: yup\r\n        .string()\r\n        .min(3, 'Password is too short - should be 5 chars minimum.')\r\n        .required('Password required.'),\r\n    rememberMe: yup\r\n        .boolean(),\r\n});\r\n\r\nexport const basicAddPostSchema = yup.object().shape(\r\n    {\r\n        addPostField: yup\r\n            .string()\r\n            .max(50, 'Text is too long - should be 50 chars maximum.')\r\n            .required('Required.')\r\n    },\r\n);\r\n\r\nexport const basicAddMessageSchema = yup.object().shape({\r\n    addMessageField: yup\r\n        .string()\r\n        .max(50, 'Text is too long - should be 50 chars maximum.')\r\n        .required('Required.')\r\n});\r\n\r\nexport const basicProfileInfoChanger = yup.object().shape({\r\n    fullName: yup\r\n        .string()\r\n        .max(15, 'Nickname is too long - should be 15 chars maximum.'),\r\n    aboutMe: yup\r\n        .string()\r\n        .max(50, 'General info is too long - should be 50 chars maximum.'),\r\n    lookingForAJob: yup\r\n        .boolean(),\r\n    lookingForAJobDescription: yup\r\n        .string()\r\n        .max(50, 'Text is too long - should be 50 chars maximum.'),\r\n});\r\n\r\n"],"names":["_ref","id","name","type","placeholder","handleChange","handleBlur","errors","touched","values","_ref$text","text","_jsxs","className","s","children","htmlFor","_jsx","onChange","value","onBlur","LoginForm","login","captchaURL","_useFormik","useFormik","initialValues","email","password","rememberMe","captcha","validationSchema","basicLoginSchema","onSubmit","_ref2","setSubmitting","setStatus","status","isSubmitting","handleSubmit","autoComplete","InputField","checked","alt","src","disabled","connect","state","isAuth","authReducer","Navigate","to","yup","shape","required","min","basicAddPostSchema","addPostField","max","basicAddMessageSchema","addMessageField","basicProfileInfoChanger","fullName","aboutMe","lookingForAJob","lookingForAJobDescription"],"sourceRoot":""}